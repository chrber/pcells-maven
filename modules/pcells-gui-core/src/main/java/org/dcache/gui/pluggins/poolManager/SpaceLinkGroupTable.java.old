// $Id: PoolIoMoverPanel.java,v 1.5 2007/04/29 11:39:25 cvs Exp $
//
package org.dcache.gui.pluggins.poolManager ;
//
import java.awt.*;
import java.awt.event.*;
import java.awt.font.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.tree.*;
import javax.swing.border.*;
import javax.swing.table.*;
import java.util.*;
import java.text.*;
import java.io.* ;
import org.pcells.services.connection.DomainConnection ;
import org.pcells.services.connection.DomainConnectionListener ;
import org.pcells.services.connection.DomainEventListener ;
import dmg.cells.network.CellDomainNode ;
import dmg.cells.nucleus.CellTunnelInfo ;
import dmg.cells.nucleus.CellDomainInfo ;   
import dmg.cells.nucleus.CellInfo ;   
import diskCacheV111.vehicles.RestoreHandlerInfo ;
import diskCacheV111.vehicles.IoJobInfo ;
import diskCacheV111.util.PnfsId ;
import diskCacheV111.poolManager.PoolManagerCellInfo ;
import org.pcells.services.gui.* ;
import org.dcache.gui.pluggins.*;
import org.pcells.services.gui.util.* ;


public class SpaceLinkGroupTable extends JTable {
   
      private IoMoverModel _model = null ;
      
      public class PopupTrigger extends MouseAdapter {
        public void mousePressed( MouseEvent event ){
            if( event.isPopupTrigger() ){
               doOnPopupTrigger( event ) ;
            }
         }
         public void mouseReleased( MouseEvent event ){
            if( event.isPopupTrigger() ){
              doOnPopupTrigger( event ) ;
            }
         }

      }
      public class SpaceLinkGroupModel extends RowObjectTableModel {
          public SpaceLinkGroup(  ){
             super(new String[]{ "Name" , "Client ID" , 
                                 "Pool Name" , "Job ID" , "PnfsId" , "Status" , 
                                 "Started" , "Submitted" , "Transfer Time" , "Bytes" , "Last" });
          }   
          public SpaceLinkGroup getQueueInfoAt( int pos ){
             return (SpaceLinkGroup)getRowAt(pos) ;
          }
      }
      public class MyRenderer extends DefaultTableCellRenderer {
          public MyRenderer(){

          }
          public Component getTableCellRendererComponent(
                            JTable table ,
                            Object value ,
                            boolean isSelected ,
                            boolean isFocused ,
                            int row , int column ){
               //System.out.println("getTableCellRendererComponent : "+row+" "+column+" "+value.getClass().getName());
               Component component =
                   super.getTableCellRendererComponent(table,value,isSelected,isFocused,row,column);

               JLabel label = (JLabel)component;

               if( ! isSelected )label.setBackground( row % 2 == 0 ? Color.white : __myGray ) ;
               label.setHorizontalAlignment( JLabel.CENTER);
             
               switch( column ){
                  case 0 :
                  case 2 :
                      label.setHorizontalAlignment( JLabel.LEFT);
                  break ;
                  case 6 :
                  case 7 :
                      label.setText( _formatter.format( new Date(((Long)value).longValue() )) ) ;
                  break ;
                  case 8 :
                      { 
                         long tt = ((Long)value).longValue() ;
                         if( tt > 1000000000000L )tt = 0 ;
                         label.setText( toTimeDifference( tt / 1000L ) ) ;
                         label.setHorizontalAlignment( JLabel.RIGHT);
                      }
                  break ;
                  case 9 :
                      label.setText( longToByteString( (Long) value ) ) ;
                      label.setHorizontalAlignment( JLabel.RIGHT);
                  break ;
                  case 10 :
                      { 
                         long tt = ((Long)value).longValue() ; 
                         tt = ( System.currentTimeMillis() - tt ) / 1000L ;
                         label.setText( toTimeDifference( tt )  ) ;
                         label.setHorizontalAlignment( JLabel.RIGHT);
                      }
                  break ;
               }
               // label.setText(restoreHandlerInfoToString(info,column));
            
               return component ;

          }
          private String longToByteString( Long value ){
             String b = value.toString() ;
             StringBuffer sb = new StringBuffer() ;
             int count = 0 ;
             for( int i = b.length()  - 1 ; i >= 0 ; i-- , count++ ){
                char c = b.charAt(i) ;
                if( ( count > 0 ) && ( ( count % 3 ) == 0 ) )sb.append('.');
                sb.append( c ) ;
             }
             return sb.reverse().toString();
          }
          public String toTimeDifference( long x ){
             boolean neg = x < 0L ;
             x = Math.abs(x)  ;
             String seconds = "" + ( x % 60 ) ;  //seconds
             if( seconds.length() == 1 )seconds = "0"+seconds;
             x = x / 60 ;
             String minutes = "" + ( x % 60 ) ;  //minutes
             if( minutes.length() == 1 )minutes = "0"+minutes;
             x = x / 60 ;
             String hours = "" + ( x % 24 ) ;  //hours
             x = x / 24 ;

             String days = ( x > 0 ) ? ( ""+x+" days" ) : "" ;

             return ( neg ? "- " : "" ) + days +" "+hours+":"+minutes+":"+seconds ;
          }
          
      }
      
     public class IoJobInfoRow implements RowObjectTableModel.SimpleTableRow {
          private Object []           _values = null ;
          private PoolMoverInfoEntry  _info   = null ;
          private String              _poolName = null ;
          private IoJobInfoRow( String poolName , PoolMoverInfoEntry info ){
             _info     = info ;
             _poolName = poolName ;
             init() ;
          }
          private void init(){
             _values = new Object[11] ;
             _values[0] = _info.info.getClientName() ;
             _values[1] = new Long( _info.info.getClientId() ) ;
             _values[2] = _poolName ;
             _values[3] = new Long( _info.info.getJobId() ) ;
             _values[4] = _info.info.getPnfsId().toString() ;
             _values[5] = _info.info.getStatus();
             _values[6] = new Long( _info.info.getStartTime() ) ;
             _values[7] = new Long( _info.info.getSubmitTime() ) ;
             _values[8] = new Long( _info.info.getTransferTime() ) ;
             _values[9] = new Long( _info.info.getBytesTransferred() ) ;
             _values[10] = new Long( _info.info.getLastTransferred() ) ;
             
          }
          //public String getName(){ return _name ; }
          //public PoolCostInfo.PoolQueueInfo getPoolQueueInfo(){ return _info ; }
          public String toString(){ return _info.info.toString() ; }
          public Object getValueAtColumn( int column ){
              return column < _values.length ? _values[column] : null ;
          }
          public Component renderCell(Component component , Object value , boolean isSelected , 
                                      boolean isFocussed , int row , int column ){

             /*
             component =
                 super.getTableCellRendererComponent(table,value,isSelected,isFocused,row,column);
             */
             JLabel label = (JLabel)component;

             IoJobInfo info = (IoJobInfo)value ;
             //label.setFont(_font) ;
             if( ! isSelected )label.setBackground( row % 2 == 0 ? Color.white : Color.gray ) ;
             label.setHorizontalAlignment( JLabel.CENTER);
             
             switch( column ){
                case 6 :
                    label.setText( _formatter.format( new Date(((Long)value).longValue() )) ) ;
                break ;
             }
            // label.setText(restoreHandlerInfoToString(info,column));
            
             return component ;
          }

      }

      private JSimpleIoMoverTable( DomainConnection connection ){
  
          setModel( _model = new IoMoverModel() ) ;
  
          JTableHeader header = getTableHeader() ;
          header.addMouseListener(_model);
  
          setDefaultRenderer( java.lang.Object.class , new MyRenderer() );
  
          addMouseListener( new PopupTrigger() ) ;
          
          createPopup() ;

      }
      public void setMoverList( PoolMoverInfoEntry [] list ){
         _model.clear() ;
         for( int i = 0 ; i < list.length ; i++ ){
            _model.add( new IoJobInfoRow( list[i].poolName , list[i] )  ) ;
         }
         _model.fire() ;
      }
      public void setInteractiveEnabled( boolean enable ){
          _popup.setEnabled(enable);
      }

   
      private void createPopup(){
         _popup = new JPopupMenu("Edit") ;
         _popup.setBorderPainted(true);
         JMenuItem item = _popup.add("Action on selected queue entries") ;
         item.setForeground(Color.red);
         item.setBackground(Color.blue);
         _popup.addSeparator() ;

         ActionListener al = new PopupAction() ;

         JMenuItem mi = _popup.add( new JMenuItem("Cancel Selected Movers(s)") ) ;
         mi.setActionCommand("cancel");
         mi.addActionListener(al) ;      

         mi = _popup.add( new JMenuItem("Check Door") ) ;
         mi.setActionCommand("checkdoor");
         mi.addActionListener(al) ;      

      }
      private class PopupAction implements ActionListener, DomainConnectionListener {
         public void domainAnswerArrived( Object obj , int id ){
            System.out.println("Popup domainAnswer arrived : "+id+"("+obj.getClass().getName()+"); : "+obj);
            if( id == 22123 ){
               if( obj instanceof dmg.cells.nucleus.NoRouteToCellException ){
                 JOptionPane.showMessageDialog(JSimpleIoMoverTable.this,
                                               "Door nor longer present",
                                               "Mover Help Message",
                                               JOptionPane.INFORMATION_MESSAGE);
               
               }else{
                   showInWindow(obj.toString(), null);
               }
            }
         }
         public void actionPerformed( ActionEvent event ){

             if( ! _popup.isEnabled() ){
                 JOptionPane.showMessageDialog(JSimpleIoMoverTable.this,
                                               "Please switch OFF autoupdate first",
                                               "Restore Help Message",
                                               JOptionPane.INFORMATION_MESSAGE);
                 return ;
             }

             int [] x = getSelectedRows() ;

             if( ( x == null ) || ( x.length == 0 ) ){
                JOptionPane.showMessageDialog(JSimpleIoMoverTable.this,
                                              "No Requests are selected",
                                              "Mover Manager Help Message",
                                              JOptionPane.INFORMATION_MESSAGE);

                return ;
             }
             String action = event.getActionCommand() ;

             if( action.equals("cancel") ){

                 int response =
                     JOptionPane.showConfirmDialog(
                           JSimpleIoMoverTable.this,
                           "Do you really want to 'cancel' selected items" ) ;
                           
                 if( response != JOptionPane.YES_OPTION )return ;
                 sendCancelFor( x ) ;
             }else if( action.equals("checkdoor") ){
             
                 if( x.length > 1 )
                 JOptionPane.showMessageDialog(JSimpleIoMoverTable.this,
                                              "Only a single entry can be selected",
                                              "Mover Manager Help Message",
                                              JOptionPane.INFORMATION_MESSAGE);

                 sendCheckRequest( x[0] ) ;
             }
         }
         private void sendCheckRequest( int row  ){
         
                 try{ 
                     PoolMoverInfoEntry entry =  _model.getQueueInfoAt(row)._info ;
                     _connection.sendObject( entry.info.getClientName() ,
                                             "info" ,
                                             this ,
                                             22123 ) ;
                 }catch(Exception ee ){
                     JOptionPane.showMessageDialog(JSimpleIoMoverTable.this,
                                              "An error occured while sending the request : "+ee,
                                              "Mover Manager Help Message",
                                              JOptionPane.INFORMATION_MESSAGE);            
                 }
             
         }
         private void sendCancelFor( int [] rows  ){
         
             if( ( rows == null ) || ( rows.length == 0 )  )return ;
             int errors = 0 ;
             for( int i = 0 ; i < rows.length ; i++ ){
             
                 int row = rows[i] ;
                 
                 PoolMoverInfoEntry entry =  _model.getQueueInfoAt(row)._info ;
                
                 System.out.println("Sending '"+("mover kill "+entry.info.getJobId())+"' to "+entry.poolName);
                 
                 try{ 
                     _connection.sendObject( entry.poolName ,
                                             "mover kill "+entry.info.getJobId() ,
                                             this ,
                                             10666 ) ;
                 }catch(Exception ee ){
                     ee.printStackTrace() ;
                     errors ++ ;
                 }
                   
             
             }
             if( errors > 0 ){
                JOptionPane.showMessageDialog(JSimpleIoMoverTable.this,
                                              "Errors have been reported (check console output)",
                                              "Mover Manager Help Message",
                                              JOptionPane.INFORMATION_MESSAGE);            
             }
         }
      } 
   }

