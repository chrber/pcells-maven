// $Id: PnfsManagerPanel.java,v 1.1 2008/11/09 08:23:58 cvs Exp $
//
package org.dcache.gui.pluggins.pnfs ;
//
import org.dcache.gui.pluggins.*;
import org.dcache.gui.pluggins.pools.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.font.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.event.* ;
import javax.swing.border.* ;
import java.util.*;
import java.io.* ;
import java.util.prefs.* ;
import java.util.regex.*  ;
import javax.swing.*;
import org.pcells.services.connection.DomainConnection ;
import org.pcells.services.connection.DomainConnectionListener ;
import org.pcells.services.connection.DomainEventListener ;
import org.pcells.services.gui.* ;
import org.pcells.services.gui.util.* ;
import diskCacheV111.vehicles.CostModulePoolInfoTable ;
import diskCacheV111.pools.PoolCostInfo ;


public class      PnfsManagerPanel
       extends    CellGuiSkinHelper.CellPanel 
       implements ActionListener, DomainConnectionListener{
                  
   private DomainConnection _connection      = null ;
   private Preferences      _preferences     = null ;

   private final String  _queue_pattern = "\\s*\\[([0-9]*)\\]\\s*([0-9]*)\\s*" ;
   private final String  _count_pattern = "\\s*(\\w*)\\s*([0-9]*)\\s*([0-9]*)\\s*([0-9]*)\\s*" ;
//   private final String  _count_pattern = "\\s*\\w*\\s*([0-9]*)\\s*([0-9]*)\\s*([0-9]*)\\s*" ;
    
   private boolean _debug = true ;
   
   private static final int REQ_PNFSMGR_INFO = 12123 ;
   
   private PnfsManagerInfoDisplay _counterDisplay = new PnfsManagerInfoDisplay();
   private PnfsDetailPanel        _detailPanel    = new PnfsDetailPanel() ;
  
   private JPanel     _switchPanel  = null ;
   private CardLayout _switchLayout = null ; 


   public PnfsManagerPanel( DomainConnection connection , Preferences preferences ){
   
      _connection  = connection ;
      _preferences = preferences ;
      
      BorderLayout l = new BorderLayout(10,10) ;
      setLayout(l) ;
      
      setBorder( BorderFactory.createTitledBorder( 
	         BorderFactory.createLineBorder( Color.blue , 1 ) , 
                "Pnfs Manager" ) ) ;
 
      add( new Controller( )  , "North" ) ;
     
      _switchPanel = new JPanel( _switchLayout = new CardLayout() ) ;
 

      JPanel inner = new JPanel( new GridBagLayout() ) ;
      inner.add( _counterDisplay ) ;

      _switchPanel.add(   inner , "main" ) ; 
      _switchPanel.add(   _detailPanel    , "detail" ) ; 

      add( _switchPanel , "Center" ) ;
       
   }
   private class PnfsManagerInfoDisplay extends JPanel {
           
      private JLabel _l_avarageQueueSize = new JLabel("Avarage Queue Size") ;
      private JLabel _l_numberOfQueues   = new JLabel("Number of Queues") ;
      private JLabel _l_numberOfThreadGropus   = new JLabel("Number of Thread Groups") ;  
      private JLabel _l_avarageThreadGroupSize = new JLabel("Avarage Thread Group Size") ;       
      private JLabel _l_numberOfCacheLocations   = new JLabel("Number of Cache Location Threads") ;  
      private JLabel _l_avarageCacheLocationSize = new JLabel("Avarage Cache Location Thread Size") ;       
      private JLabel _l_timeElapsed      = new JLabel("Time Elapsed");
      private JLabel _l_totalRequests    = new JLabel("Total Requests");
      private JLabel _l_badRequests      = new JLabel("Failed Requests");
      private JLabel _l_requestRate      = new JLabel("Total Request Rate[sec]");
      private JLabel _avarageQueueSize = new JLabel("0",JLabel.CENTER) ;
      private JLabel _timeElapsed      = new JLabel("0",JLabel.CENTER);
      private JLabel _numberOfQueues   = new JLabel("0",JLabel.CENTER);
      private JLabel _totalRequests    = new JLabel("0",JLabel.CENTER);
      private JLabel _badRequests      = new JLabel("0",JLabel.CENTER);
      private JLabel _requestRate      = new JLabel("0.0",JLabel.CENTER);
      private JLabel _numberOfThreadGroups   = new JLabel("0",JLabel.CENTER) ;
      private JLabel _averageThreadGroupSize = new JLabel("0.0",JLabel.CENTER) ;
      private JLabel _numberOfCacheLocations   = new JLabel("0",JLabel.CENTER) ;
      private JLabel _averageCacheLocationSize = new JLabel("0.0",JLabel.CENTER) ;
      
      private PnfsManagerInfo _previousInfo = null ;
   
      private PnfsManagerInfoDisplay(){
              
          setLayout( new GridLayout(0,2,10,10) );
          
          setBorder( BorderFactory.createTitledBorder( 
	         BorderFactory.createLineBorder( Color.blue , 1 ) , 
                "Pnfs Manager Counter" ) ) ;
          
          add( _l_timeElapsed ) ;     add( _timeElapsed ) ;
          add( _l_totalRequests ) ;   add( _totalRequests ) ;
          add( _l_badRequests ) ;     add( _badRequests ) ;
          add( _l_requestRate ) ;     add( _requestRate ) ;
          add( _l_numberOfQueues ) ;  add( _numberOfQueues ) ;
          add( _l_avarageQueueSize ) ;add( _avarageQueueSize ) ;
	  add( _l_numberOfThreadGropus ) ;   add( _numberOfThreadGroups ) ;
	  add( _l_avarageThreadGroupSize ) ; add( _averageThreadGroupSize ) ;
          add( _l_numberOfCacheLocations ) ; add( _numberOfCacheLocations ) ;
          add( _l_avarageCacheLocationSize ) ; add( _averageCacheLocationSize ) ;
      }
      //
      // result = b - a ;
      //
      private Map calculateDetailDiff( HashMap a , HashMap b ){
         Map result = new HashMap() ;
         for( Iterator i = a.keySet().iterator() ; i.hasNext() ; ){
             String key = (String)i.next() ;
             long valueA , valueB ;
             try{
                valueA = Long.parseLong( (String) a.get(key) ) ; 
                valueB = Long.parseLong( (String) b.get(key) ) ; 
                result.put( key , ""+( valueB - valueA ) ) ;
             }catch(Exception wrong ){
                System.err.println("Problem in calculating details diff at "+key+" : "+wrong ) ; 
             }
         }
         return result ;
      }
      private void setPnfsManagerInfo( PnfsManagerInfo info ){
         if( _previousInfo == null ){
             _previousInfo = info ;
             return ;             
         }
         long elapsed     = info._timestamp   - _previousInfo._timestamp ;
         long requestsOk  = info._requestsOk  - _previousInfo._requestsOk ;
         long requestsBad = info._requestsBad - _previousInfo._requestsBad ;
         _previousInfo = info ;
         _numberOfQueues.setText( ""+info._numberOfQueues);
         _avarageQueueSize.setText( ""+(float)( (double)info._numberOfRequests / (double)info._numberOfQueues ) ) ;
         _timeElapsed.setText( ""+((float)elapsed/1000.0)+" sec");
         _totalRequests.setText(""+requestsOk ) ;
         _badRequests.setText(""+requestsBad ) ;
         _requestRate.setText(""+(float)((double)( requestsOk + requestsBad )/(double)elapsed*1000.0));

	 _numberOfThreadGroups.setText( ""+info._numberOfThreadGroups ) ;
	 if( info._numberOfThreadGroups > 0 )
	   _averageThreadGroupSize.setText( ""+(float)( (double)info._numberOfRequestsInThreadGroups / (double)info._numberOfThreadGroups ) ) ;
 
         _numberOfCacheLocations.setText( ""+info._numberOfCacheLocations ) ;
         if( info._numberOfCacheLocations  > 0 )
	   _averageCacheLocationSize.setText( ""+(float)( (double)info._numberOfRequestsInCacheLocations / (double)info._numberOfCacheLocations ) ) ;
      }
	   
   }
   private class PnfsManagerInfo {
      int [] _threads = null ;
      long _requestsOk     = 0 , _requestsBad      = 0 ;
      int  _numberOfQueues = 0 , _numberOfRequests = 0 ;
      int  _numberOfThreadGroups = 0 , _numberOfRequestsInThreadGroups = 0 ;
      int  _numberOfCacheLocations = 0 , _numberOfRequestsInCacheLocations = 0 ;
      long _timestamp = 0L ;
      HashMap _statisticsMap = null ;

      private void touch(){
         _timestamp = System.currentTimeMillis() ;       
      }
      private PnfsManagerInfo(){
         touch() ;       
      }
   }

   private static final int ST_IDLE            = 0 ;
   private static final int ST_THREAD_QUEUES   = 1 ;
   private static final int ST_THREAD_GROUPS   = 2 ;
   private static final int ST_CACHE_LOCATIONS = 3 ;
   private static final int ST_STATISTICS      = 4 ;
   private static final int ST_STATISTICS_BASE = 5 ;
   private static final int ST_STATISTICS_FOLD = 6 ;
   
   public class PnfsManagerDecodingException extends Exception {
       private int _lineNumber = 0 ;
       public PnfsManagerDecodingException(String message , int lineNumber ){
            super(message);
           _lineNumber = lineNumber ;
       }
       public int getLine(){ return _lineNumber ; }
   }
  
   private PnfsManagerInfo decodePnfsManagerInfo( String info )
        throws Exception{

	int     state = 0 ;
	Matcher m     = null ;
	Pattern p     = null ;
	long requestCounter  = 0 ;
	long errorCounter    = 0 ;
	int numberOfQueues   = 0 ;
	int numberOfRequests = 0 ;
	int numberOfThreadGroups = 0 ;
	int numberOfRequestsInThreadGroups = 0 ;
        int numberOfCacheLocations = 0 ;
        int numberOfRequestsInCacheLocations = 0 ;
        HashMap statisticsMap = new HashMap() ;
        int statisticsMode = 0 ;
	
	StringTokenizer st = new StringTokenizer(info,"\n");
	for( int linecount = 0 ;  st.hasMoreTokens()  ; linecount++) {
	     String line = st.nextToken() ;
	     if( line.trim().length() == 0 )continue ;
             System.out.println("State : ["+state+"] Line : "+line ) ;
	     switch( state ){
			    
	     case ST_IDLE :
		   if( ( line.indexOf("Threads") >=0 ) && ( line.indexOf("Queue") >=0 ) ){
		       state = ST_THREAD_QUEUES ;   
		       p = Pattern.compile(_queue_pattern) ;
		   }
		   break ;
             case ST_THREAD_QUEUES :
		   if( line.indexOf( "Statistics:" ) >= 0 ){
		       state = ST_STATISTICS ;
		       p = Pattern.compile(_count_pattern) ;
		   }else if( line.indexOf("Thread groups") >= 0 ){
		       state = ST_THREAD_GROUPS ;
		       p = Pattern.compile(_queue_pattern) ;
                   }else if( line.indexOf("Cache Location Queues") >=0 ){
                       state =  ST_CACHE_LOCATIONS ;
		       p = Pattern.compile(_queue_pattern) ;
		   }else{
	               m = p.matcher(line) ;
		       if( ! m.matches() )
		       throw new
	                  PnfsManagerDecodingException("LINE : "+linecount+";Found : "+line+"; expected [queue] count",linecount);
		       numberOfQueues ++ ;
		       numberOfRequests += Integer.parseInt(m.group(2));
		       System.out.println(" !! "+numberOfQueues + "  " +numberOfRequests ) ;
		   }
		 
             break ;
             case ST_THREAD_GROUPS :
		   if( line.indexOf( "Statistics:" ) >= 0 ){
		       state = ST_STATISTICS ;
		       p = Pattern.compile(_count_pattern) ;
                   }else if( line.indexOf("Cache Location Queues") >= 0 ){
                       state =  ST_CACHE_LOCATIONS ;
		       p = Pattern.compile(_queue_pattern) ;
		   }else{
	               m = p.matcher(line) ;
		       if( ! m.matches() )
		       throw new
	                  PnfsManagerDecodingException("LINE : "+linecount+";Found : "+line+"; expected [queue] count",linecount);
		       numberOfThreadGroups ++ ;
		       numberOfRequestsInThreadGroups += Integer.parseInt(m.group(2));
		       System.out.println(" !! "+numberOfThreadGroups + "  " +numberOfRequestsInThreadGroups ) ;
		   }
		 
            break ;
            case ST_CACHE_LOCATIONS :
		   if( line.indexOf( "Statistics:" ) >= 0 ){
		       state = ST_STATISTICS ;
		       p = Pattern.compile(_count_pattern) ;
		   }else{
	               m = p.matcher(line) ;
		       if( ! m.matches() )
		       throw new
	                  PnfsManagerDecodingException("LINE : "+linecount+";Found : "+line+"; expected [queue] count",linecount);
		       numberOfCacheLocations ++ ;
		       numberOfRequestsInCacheLocations += Integer.parseInt(m.group(2));
		       System.out.println(" !! "+numberOfCacheLocations + "  " +numberOfRequestsInCacheLocations ) ;
		   }
            break ;
            case ST_STATISTICS :
		   {
                       if( ( line.indexOf( "PnfsManager") >= 0 ) ||
                           ( line.indexOf( "Total" )      >= 0 )    ){
                          statisticsMode ++;
                          break ;
                       }
 
	               m = p.matcher(line) ;
		       if( ! m.matches() )
		       throw new
	                  PnfsManagerDecodingException("LINE : "+linecount+";Found : "+line+"; expected [queue] count",linecount);
                       String CounterName     = m.group(1);
                       long   CounterRequests = Long.parseLong(m.group(2)) ;
                       long   CounterErrors   = Long.parseLong(m.group(3)) ;
                       System.out.println( "DEBUG : "+CounterName+" "+CounterRequests+" "+CounterErrors ) ;
		       requestCounter += CounterRequests;
		       errorCounter   += CounterErrors;
                       long [] x = { CounterRequests , CounterErrors }; 
                       statisticsMap.put( CounterName , x ) ;
                       
		   }
		break ;
	     }
          }
	  System.out.println(" !!! Counters " + requestCounter+ "  "+errorCounter) ;
	  PnfsManagerInfo pnfsInfo = new PnfsManagerInfo() ;
	  pnfsInfo._numberOfQueues   = numberOfQueues ;
	  pnfsInfo._numberOfRequests = numberOfRequests ;
	  pnfsInfo._numberOfThreadGroups = numberOfThreadGroups ;
	  pnfsInfo._numberOfRequestsInThreadGroups = numberOfRequestsInThreadGroups ;  
          pnfsInfo._numberOfCacheLocations = numberOfCacheLocations ;
          pnfsInfo._numberOfRequestsInCacheLocations = numberOfRequestsInCacheLocations ;
	  pnfsInfo._requestsOk   = requestCounter ;
	  pnfsInfo._requestsBad  = errorCounter ;
          pnfsInfo._statisticsMap = statisticsMap ;
          return pnfsInfo ;
	}
   public void domainAnswerArrived( Object obj , int subid ){
      
      if( subid == REQ_PNFSMGR_INFO ){
	 
	    if( ( obj == null ) ){
	       //
	       // This is a timeout
	       //
	       //setWaiting(false);
	       displayErrorMessage("Request to PnfsManager timed out" );
	       
	    }else if( obj instanceof dmg.cells.nucleus.NoRouteToCellException ){
	       //
	       // The SrmSpaceManager is not reachable.
	       //
	       setWaiting(false);
	       displayErrorMessage("PnfsManager not present !" );
	       	       
	    }else if( obj instanceof String ){
	       System.out.println(obj.toString());
	       try{

                  PnfsManagerInfo pnfsManagerInfo = decodePnfsManagerInfo( (String)obj ) ;

	          _counterDisplay.setPnfsManagerInfo( pnfsManagerInfo );
                  _detailPanel.setMap( pnfsManagerInfo._statisticsMap ) ;

	       }catch(PnfsManagerDecodingException pee ){
		  pee.printStackTrace();
	          setWaiting(false);
	          displayErrorMessage("Problem in decoding message from PnfsManager at line "+pee.getLine() );
	       }catch(Exception ee ){
		  ee.printStackTrace();
	          setWaiting(false);
	          displayErrorMessage("Problem in decoding message from PnfsManager" );
	       }
	    }
      }
   }
   private void askForPnfsInfo(){
       try{
	  System.out.println("Asking for pnfs info");
	  _connection.sendObject(  
	         "PnfsManager" , "info" , this , REQ_PNFSMGR_INFO
		                      ) ;
	              
       }catch(Exception e ){
          displayErrorMessage("Couldn't send query to server.\n"+e.getMessage() );	        
       }
   }
   private void displayErrorMessage(String errorMessage ){
         JOptionPane.showMessageDialog(
               PnfsManagerPanel.this, errorMessage ,
               "Server Problem",JOptionPane.ERROR_MESSAGE);
   }
   private void setWaiting( boolean waiting ){
	   
   }
   public void actionPerformed( ActionEvent event ){
   
   }

   private class Controller 
           extends JPanel 
	   implements ActionListener  {
   
      private JButton _updateTree     = new JButton("Update") ;
      private JButton _updateCost     = new JButton("Update Cost") ;
      private JButton _displayMode    = new JButton("Details") ;
      private JCheckBox _costByMover  = new JCheckBox("Cost by Mover");
      private JCheckBox _costDetails  = new JCheckBox("Cost Details");
      private JComboBox _autoUpdate   = null ;
      private boolean   _weAreWaiting = false ;
      
      private javax.swing.Timer _autoUpdateTimer  = new javax.swing.Timer( 100 , this ) ; 
      
      private class AutoObject {
         private String name ;
	 private long   interval ;
	 private AutoObject( String name , long interval ){
	   this.name = name ; this.interval = interval ;
	 }
	 public String toString(){return name ; }
	 public long getInterval(){ return interval ; }
      }
      private AutoObject [] _autoLabels = {
            new AutoObject("Manual",0L) , 
	    new AutoObject("2 Sec",2L), 
	    new AutoObject("10 Sec",10L), 
	    new AutoObject("30 Sec",30L),
	    new AutoObject("1 min" ,60L),
     };
    
     private Controller(){
      
         setLayout( new FlowLayout(FlowLayout.CENTER,10,10) ) ; 
         setBorder( BorderFactory.createEtchedBorder( ) ) ;
	 
	 _autoUpdate = new JComboBox(_autoLabels);
	 
	 _autoUpdate.addActionListener(this) ;
	 _updateTree.addActionListener(this);
	 _updateCost.addActionListener(this);
	 _costByMover.addActionListener(this);
	 _costDetails.addActionListener(this);
	 _displayMode.addActionListener(this);
	 
	 add( _autoUpdate ) ;
	 add( _updateTree ) ;
	 add( _displayMode ) ;
//	 add( _updateCost ) ;
//	 add( _costByMover ) ;
//	 add( _costDetails ) ;
	 
 	 
      }
      public void actionPerformed( ActionEvent event ){
         Object source = event.getSource() ;
         if( source == _updateTree ){
	     askForPnfsInfo() ;
	 }else if( source == _updateCost ){
	 }else if( source == _costByMover ){
	     
	     
	 }else if( source == _costDetails ){
	 }else if( source == _autoUpdate ){

	     AutoObject auto = (AutoObject)_autoUpdate.getSelectedItem() ;
	     if( auto == null )return ;
	     if( auto.interval == 0 ){
	         _autoUpdateTimer.stop() ;
		 _updateCost.setEnabled(true);
		 _updateTree.setEnabled(true);
             }else{
	         _autoUpdateTimer.stop() ;
		 _autoUpdateTimer.setDelay( (int) (auto.interval*1000L ) ) ;
	         _autoUpdateTimer.start() ;
		 _updateCost.setEnabled(false);
		 _updateTree.setEnabled(false);
 	     }
	 }else if( source == _displayMode ){
            _switchLayout.next( _switchPanel ) ;
            System.out.println("Switching ...");
	 }else if( source == _autoUpdateTimer ){
	     _updateCost.setEnabled(false);
	     _updateTree.setEnabled(false);
             System.out.println("Ping : "+System.currentTimeMillis());
	     askForPnfsInfo() ;
	 }
      }
   }
   
}
